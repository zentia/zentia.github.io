<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>着色器开发 on zentia</title><link>https://zentia.github.io/categories/%E7%9D%80%E8%89%B2%E5%99%A8%E5%BC%80%E5%8F%91/</link><description>Recent content in 着色器开发 on zentia</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://zentia.github.io/categories/%E7%9D%80%E8%89%B2%E5%99%A8%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml"/><item><title>在虚幻引擎中添加全局着色器</title><link>https://zentia.github.io/p/%E5%9C%A8%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%85%A8%E5%B1%80%E7%9D%80%E8%89%B2%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/%E5%9C%A8%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%85%A8%E5%B1%80%E7%9D%80%E8%89%B2%E5%99%A8/</guid><description>&lt;img src="https://zentia.github.io/p/%E5%9C%A8%E8%99%9A%E5%B9%BB%E5%BC%95%E6%93%8E%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%85%A8%E5%B1%80%E7%9D%80%E8%89%B2%E5%99%A8/ue5-hero.png" alt="Featured image of post 在虚幻引擎中添加全局着色器" />&lt;p>全局着色器（Global Shaders）是不通过材质编辑器创建的着色器。相反，全局着色器使用C++创建，它们在固定的几何体上运行，并且无需与材质或网格体结合。有时候，必须使用更高级的功能才能实现某些外观，为此，有必要自定义着色器通道。&lt;/p>
&lt;p>全局着色器的部分示例包括渲染后期处理效果、分配计算着色器和清空屏幕。&lt;/p>
&lt;h1 id="虚幻着色器文件">虚幻着色器文件
&lt;/h1></description></item><item><title>HLSL 交叉编译器</title><link>https://zentia.github.io/p/hlsl-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/hlsl-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%99%A8/</guid><description>&lt;img src="https://zentia.github.io/p/hlsl-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%99%A8/ue5-hero.png" alt="Featured image of post HLSL 交叉编译器" />&lt;h1 id="入门">入门
&lt;/h1>&lt;p>引擎中的渲染器模块管理并渲染场景，而场景拥有和每个世界场景相关的可渲染信息。它包括所有绘制规则和着色器的定义。&lt;/p>
&lt;p>RHI 模块是渲染 API 的接口，是图形编程的另一个关键组件。图形编程介绍包含许多可研究的键类、设置和变量，以下子页面包含详细的渲染要点。&lt;/p></description></item><item><title>调试着色器编译过程</title><link>https://zentia.github.io/p/%E8%B0%83%E8%AF%95%E7%9D%80%E8%89%B2%E5%99%A8%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/%E8%B0%83%E8%AF%95%E7%9D%80%E8%89%B2%E5%99%A8%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</guid><description>&lt;img src="https://zentia.github.io/p/%E8%B0%83%E8%AF%95%E7%9D%80%E8%89%B2%E5%99%A8%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/ue5-hero.png" alt="Featured image of post 调试着色器编译过程" />&lt;h1 id="入门">入门
&lt;/h1>&lt;p>引擎中的渲染器模块管理并渲染场景，而场景拥有和每个世界场景相关的可渲染信息。它包括所有绘制规则和着色器的定义。&lt;/p>
&lt;p>RHI 模块是渲染 API 的接口，是图形编程的另一个关键组件。图形编程介绍包含许多可研究的键类、设置和变量，以下子页面包含详细的渲染要点。&lt;/p></description></item><item><title>着色器调试工作流程</title><link>https://zentia.github.io/p/%E7%9D%80%E8%89%B2%E5%99%A8%E8%B0%83%E8%AF%95%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/%E7%9D%80%E8%89%B2%E5%99%A8%E8%B0%83%E8%AF%95%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</guid><description>&lt;img src="https://zentia.github.io/p/%E7%9D%80%E8%89%B2%E5%99%A8%E8%B0%83%E8%AF%95%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/ue5-hero.png" alt="Featured image of post 着色器调试工作流程" />&lt;h1 id="渲染线程">渲染线程
&lt;/h1>&lt;p>在虚幻引擎中，整个渲染器在其自身的线程中执行操作，该线程位于游戏线程的一两帧后。&lt;/p>
&lt;p>执行渲染操作时，必须仔细地考虑内存读写，确保线程安全，以及行为的确定性。功能行为取决于两个线程之间的执行速度差，这种情况被称作竞争条件。需要尽量避免竞争条件的出现，因为它们难以重现；且因为速度差的缘故，它们可能依赖于机器、平台、调试器或配置。这类 bug 很难进行调试，所花费的修复时间约为可重现的普通 bug 的 10 倍。&lt;/p></description></item></channel></rss>
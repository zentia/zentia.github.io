<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>全局光照 on zentia</title><link>https://zentia.github.io/categories/%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/</link><description>Recent content in 全局光照 on zentia</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://zentia.github.io/categories/%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/index.xml" rel="self" type="application/rss+xml"/><item><title>Lumens性能指南</title><link>https://zentia.github.io/p/lumens%E6%80%A7%E8%83%BD%E6%8C%87%E5%8D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/lumens%E6%80%A7%E8%83%BD%E6%8C%87%E5%8D%97/</guid><description>&lt;img src="https://zentia.github.io/p/lumens%E6%80%A7%E8%83%BD%E6%8C%87%E5%8D%97/ue5-hero.png" alt="Featured image of post Lumens性能指南" />&lt;p>Lumen的目标是，能够在主机上分别以8毫秒和4毫秒的帧预算实现30和60FPS，并为不透明和半透明材质以及体积雾实现全局光照和反射效果。引擎采用了一系列预先配置好的&amp;quot;可扩展/弹性（Scalability）&amp;ldquo;设置让Lumen应对不同的目标帧率需求。超高（Epic） 级别对应的帧率为30FPS。高（High） 级别对应的目标帧率为60FPS。&lt;/p>
&lt;p>Lumen依赖&lt;a class="link" href="https://zentia.github.io/p/%E5%8A%A8%E6%80%81%E5%88%86%E8%BE%A8%E7%8E%87/" target="_blank" rel="noopener"
>时间上采样&lt;/a>和虚幻引擎5的&lt;a class="link" href="https://zentia.github.io/p/%E6%97%B6%E9%97%B4%E8%B6%85%E7%BA%A7%E5%88%86%E8%BE%A8%E7%8E%87/" target="_blank" rel="noopener"
>时间超级分辨率&lt;/a>（TSR）功能来提供4k输出。Lumen和一些其他功能本身只使用较低的内部分辨率（1080p），这样能赋予TSR最佳的最终图像质量。否则，如果直接以4K原生分辨率渲染这些功能，则需要降低质量设置，这样才能实现30或60 FPS的帧率。&lt;/p>
&lt;h1 id="可扩展性设置">可扩展性设置
&lt;/h1>&lt;p>你可以在关卡编辑器中的 设置（Settings）&amp;gt; 引擎可扩展性设置（Engine Scalability Settings） 视口下找到可扩展性设置。在游戏中，请使用GameUserSettings和图形设置菜单来控制可扩展性设置（相关示例请参阅Lyra项目）。Lumen的品质可以通过 全局光照（Global Illumination） 和 反射（Reflections） 质量组进行设置：&lt;/p>
&lt;ul>
&lt;li>电影级（Cinematic） 可扩展性级别适合用于影片渲染队列。&lt;/li>
&lt;li>超高（Epic） 可扩展性级别的性能目标是在主机上实现30 FPS。&lt;/li>
&lt;li>高（High） 可扩展性级别的性能目标是在主机上实现60 FPS。&lt;/li>
&lt;li>低（Low） 和 中（Medium） 可扩展性级别下，Lumen功能会被禁用。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://zentia.github.io/p/lumens%E6%80%A7%E8%83%BD%E6%8C%87%E5%8D%97/engine-scalability-settings.png"
width="848"
height="654"
srcset="https://zentia.github.io/p/lumens%E6%80%A7%E8%83%BD%E6%8C%87%E5%8D%97/engine-scalability-settings_hu_220907a2d89a6b20.png 480w, https://zentia.github.io/p/lumens%E6%80%A7%E8%83%BD%E6%8C%87%E5%8D%97/engine-scalability-settings_hu_39ca8212dc519f8a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="311px"
>&lt;/p>
&lt;p>默认情况下，虚幻引擎在主机上的性能目标是30 FPS。如需以60 FPS为目标，将 全局光照（Global Illumination） 和 反射（Reflections） 质量组设置为 高（High） 。相关配置描述位于 [你的项目名称]\Platforms[主机]\Config\ 文件夹。例如，[你的项目名称]\Platforms\PS5\Config\PS5DeviceProfiles.ini 。&lt;/p>
&lt;p>例如，以60 FPS为目标的PlayStation 5的设备描述如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">PS5&lt;/span> &lt;span class="n">DeviceProfile&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">;&lt;/span>&lt;span class="err">将&lt;/span>&lt;span class="n">Lumen&lt;/span> &lt;span class="n">GI和反射质量设置为&lt;/span>&lt;span class="s">&amp;#34;高&amp;#34;&lt;/span>&lt;span class="err">，目标为&lt;/span>&lt;span class="mi">60&lt;/span> &lt;span class="n">fps&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">+&lt;/span>&lt;span class="n">CVars&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">GlobalIlluminationQuality&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">+&lt;/span>&lt;span class="n">CVars&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ReflectionQuality&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="其他质量级别不启用lumen">其他质量级别(不启用Lumen)
&lt;/h1>&lt;p>全局光照（Global Illumination） 和 反射（Reflections） 的默认质量设置位于 \Engine\Config\BaseScalability.ini 中。这些设置会试图让间接光照的品质在不同质量级别下保持相似。这么做的额外好处是，你无需在不同平台上重新设置你的光照参数，同时还能缩减Lumen的开销。&lt;/p>
&lt;p>中质量级别&lt;/p>
&lt;ul>
&lt;li>对于大规模的环境光遮蔽， 距离场环境光遮蔽（Distance Field Ambient Occlusion） 会取代 Lumen全局光照（Lumen Global Illumination） 。&lt;/li>
&lt;li>对于小规模的环境光遮蔽，会启用 屏幕空间环境光遮蔽（Screen Space Ambient Occlusion） 。&lt;/li>
&lt;/ul>
&lt;p>低质量级别&lt;/p>
&lt;ul>
&lt;li>仅使用无阴影的天空光照。&lt;/li>
&lt;li>降低天空光照强度（r.SkylightIntensityMultiplier=0.7），以近似模拟 中（Medium） 质量级别中的效果，因为此时没有天空光照阴影。&lt;/li>
&lt;/ul>
&lt;h2 id="软件光线追踪">软件光线追踪
&lt;/h2></description></item><item><title>预计算光照情景</title><link>https://zentia.github.io/p/%E9%A2%84%E8%AE%A1%E7%AE%97%E5%85%89%E7%85%A7%E6%83%85%E6%99%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/%E9%A2%84%E8%AE%A1%E7%AE%97%E5%85%89%E7%85%A7%E6%83%85%E6%99%AF/</guid><description>&lt;img src="https://zentia.github.io/p/%E9%A2%84%E8%AE%A1%E7%AE%97%E5%85%89%E7%85%A7%E6%83%85%E6%99%AF/ue5-hero.png" alt="Featured image of post 预计算光照情景" />&lt;p>虚幻引擎支持在关卡中使用不同的预计算光照情景（Precomputed Lighting Scenarios）。这使得单个关卡可以保存并显示多种光照设置，使玩家即获得灵活的动态光照，又能以固定开销预计算光照。对用高性能方式进行高精度渲染的虚拟显示（VR）或建筑可视化而言，在不同预计算光照情景之间切换更显重要。通读此文后，你便能了解如何在项目中使用预计算光照。&lt;/p>
&lt;h1 id="功能限制">功能限制
&lt;/h1>&lt;p>虽然预计算光照情景拥有诸多优点，但使用时也需要注意其缺陷和限制。在下文中，我们将介绍其中的一些限制，并告诉你如何回避（或解决）它们。&lt;/p>
&lt;ul>
&lt;li>在游戏中只限制一个可见光照情景关卡。&lt;/li>
&lt;li>光照情景关卡出现后，来自所有子关卡的光照图数据均会放置在其中，因此白天时只加载Day Scenario光照图。因此光照图将不再由子关卡进行流送。&lt;/li>
&lt;li>子关卡光照贴图数据保存在光照情景的BuildData包中。注册来自其他子关卡的反射捕获会修改当前光照情景的BuiltData。假如加载子关卡两次，并且只加载光照情景BulidData一次，就会产生如下错误：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">错误： 反射捕获 /Game/Environments/Levels/Your_Level_Name.level_name:PersistentLevel.SphereReflectionCapture_1.NewReflectionComponent 上传了两次，且未重新加载其光照情景关卡。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>CPU Lightmass全局光照</title><link>https://zentia.github.io/p/cpu-lightmass%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/cpu-lightmass%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/</guid><description>&lt;img src="https://zentia.github.io/p/cpu-lightmass%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/ue5-hero.png" alt="Featured image of post CPU Lightmass全局光照" />&lt;p>全局光照（Lightmass）创建具有复杂光交互作用的光照图，例如区域阴影和漫反射。它用于预计算具有固定和静态运动型的光源的光照共享部分。&lt;/p>
&lt;p>编辑器和全局光照之间的通信由Swarm Agent处理，它管理本地的光照构建，也可以将光照构建分发到远程机器。默认情况下以最小化方式打开的Swarm Agent还会跟踪光照构建进度，并让你了解哪些机器为你工作，它们在做什么，以及每个机器使用了多少线程。&lt;/p>
&lt;h1 id="静态和固定光源的特性">静态和固定光源的特性
&lt;/h1>&lt;h2 id="漫反射">漫反射
&lt;/h2>&lt;p>漫反射（Diffuse Interreflection）是目前为止视觉上最重要的全局光照效果。在默认情况下，光源以全局光照反射，而材质的基本颜色（BaseColor）项控制有多少光（和什么颜色）向各个方向反射。这种效果有时称为渗色。漫反射是入射光在各个方向上均匀反射，即不受观测方向或位置的影响。&lt;/p>
&lt;p>这里是一个由全局光照创建的场景，只有一个方向的光，且仅显示直接光照。光源无法直接照射的区域是黑色的。这是没有全局光照的结果。&lt;/p>
&lt;p>&lt;img src="https://zentia.github.io/p/cpu-lightmass%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/02-lightmass-global-illum-direct-light-only.png"
width="1240"
height="798"
srcset="https://zentia.github.io/p/cpu-lightmass%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/02-lightmass-global-illum-direct-light-only_hu_d6e5eeef116b0c8.png 480w, https://zentia.github.io/p/cpu-lightmass%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/02-lightmass-global-illum-direct-light-only_hu_ac6e2e65a8a2228d.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p></description></item><item><title>Lumens技术细节</title><link>https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/</guid><description>&lt;img src="https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/ue5-hero.png" alt="Featured image of post Lumens技术细节" />&lt;p>Lumen使用多种光线追踪方法来解决全局光照和反射。首先执行屏幕追踪，然后使用更加可靠的方法。在默认情况下，Lumen通过有向距离场使用 软件光线追踪（Software Ray Tracing） ，同时在启用 硬件光线追踪（Hardware Ray Tracing） 时，在支持的视频显卡上达到更高品质。&lt;/p>
&lt;blockquote>
&lt;p>Lumen的全局光照和反射最初的主要目标是支持在下一代主机上以每秒60帧（FPS）运行的大型开放世界。引擎的 高（High） 可扩展性级别中就包括以60FPS为目标的Lumen设置。&lt;/p>
&lt;p>Lumen的次要关注点就是在下一代主机上以30FPS实现通透的室内光照。引擎的 超高（Epic） 可扩展性级别在下一代主机上能够在8毫秒内以1080p内部分辨率实现全局光照和反射，这个目标依赖&lt;a class="link" href="https://zentia.github.io/p/%E6%97%B6%E9%97%B4%E8%B6%85%E7%BA%A7%E5%88%86%E8%BE%A8%E7%8E%87/" target="_blank" rel="noopener"
>时序超分辨率（TSR）&lt;/a>来输出接近原生4K的画质。&lt;/p>
&lt;p>更多关于Lumen性能的信息，请参阅&lt;a class="link" href="https://zentia.github.io/p/lumens%E6%80%A7%E8%83%BD%E6%8C%87%E5%8D%97/" target="_blank" rel="noopener"
>Lumens性能指南&lt;/a>.&lt;/p>&lt;/blockquote>
&lt;h1 id="表面缓存">表面缓存
&lt;/h1>&lt;p>Lumen生成附近场景表面的自动参数化，这种方法称为 表面缓存（Surface Cache） 。使用这种方法可以快速查找场景中光线接触点的光照。Lumen会从多个角度捕获每个网格体的材质属性。这些捕获位置（即 卡片（Cards） ）是针对每个网格体脱机生成的。&lt;/p>
&lt;p>可以使用控制台命令 &lt;code>r.Lumen.Visualize.CardPlacement 1&lt;/code> 来可视化卡片。&lt;/p>
&lt;p>&lt;img src="https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/mesh-card-placement-visualization-alt.png"
width="1340"
height="862"
srcset="https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/mesh-card-placement-visualization-alt_hu_ca45ee53b0a17502.png 480w, https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/mesh-card-placement-visualization-alt_hu_690649c6b4c5328f.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="373px"
>&lt;/p>
&lt;p>默认情况下，Lumen在一个网格体上放置12个卡，但可以通过在静态网格体编辑器的 构建设置（Build Settings） 中设置 最大Lumen网格体卡片数量（Max Lumen Mesh Cards） 来增加该数量。调整卡的数量对于更复杂的内部或具有不规则形状的单个网格体非常有用。&lt;/p>
&lt;p>&lt;img src="https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/static-mesh-editor-max-lumen-mesh-cards-setting.png"
width="541"
height="816"
srcset="https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/static-mesh-editor-max-lumen-mesh-cards-setting_hu_93edbb7ce9fed6fe.png 480w, https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/static-mesh-editor-max-lumen-mesh-cards-setting_hu_7cb52ab3768f8d9a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="159px"
>&lt;/p>
&lt;p>没有表面缓存覆盖的区域将在关卡编辑器的 表面缓存(Surface Cache) 视图模式中变成粉色。&lt;/p>
&lt;blockquote>
&lt;p>这些区域不会反射光线，在反射过程中显示为黑色。此类问题可以通过增加最大Lumen网格体卡片数量中的卡片数来解决，但可能无法解决所有问题。或者，将网格体分解成不太复杂的几部分也可以解决这类问题。&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/viewmode-lumen-surface-cache.png"
width="605"
height="612"
srcset="https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/viewmode-lumen-surface-cache_hu_e417fd8c254ee87b.png 480w, https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/viewmode-lumen-surface-cache_hu_88ba30688906d1ee.png 1024w"
loading="lazy"
alt="视图模式（View Mode） &amp;gt; Lumen &amp;gt; 表面缓存（Surface Cache）"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="237px"
>
&lt;img src="https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/lumen-surface-cache-visualization.png"
width="1199"
height="926"
srcset="https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/lumen-surface-cache-visualization_hu_885c3c020704d7f2.png 480w, https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/lumen-surface-cache-visualization_hu_6d4fe9f5e54076f8.png 1024w"
loading="lazy"
alt="复杂网格体的Lumen表面缓存可视化（Lumen Surface Cache Visualization of Complex Mesh）"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>具有视图相关逻辑的材质，例如像素深度、摄像机位置或摄像机矢量，在Lumen表面缓存视图模式下看起来可能不正确。使用这些节点的材质可能使用 光线追踪质量切换（Ray Tracing Quality Switch） 节点来提供采用Lumen表面缓存的材质版本，或为复杂材质而优化表面缓存捕获。&lt;/p>
&lt;p>&lt;img src="https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/ray-tracing-quality-switch-node.png"
width="355"
height="125"
srcset="https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/ray-tracing-quality-switch-node_hu_278909caa898f28d.png 480w, https://zentia.github.io/p/lumens%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/ray-tracing-quality-switch-node_hu_c0f656a9a732a6fe.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="284"
data-flex-basis="681px"
>&lt;/p>
&lt;blockquote>
&lt;p>如需详细了解如何使用光线追踪质量切换节点，请参阅光线追踪性能指南。&lt;/p>&lt;/blockquote>
&lt;p>Nanite可以加速用于使表面缓存与三角形场景保持同步的网格体捕获。尤其是多边形网格体，需要使用&lt;a class="link" href="https://zentia.github.io/p/nanite%E8%99%9A%E6%8B%9F%E5%87%A0%E4%BD%95%E4%BD%93/" target="_blank" rel="noopener"
>Nanite&lt;/a>进行有效捕获。只有网格体使用了Nanite，才支持植被和实例化的静态网格体组件。&lt;/p></description></item><item><title>GPU Lightmass全局光照</title><link>https://zentia.github.io/p/gpu-lightmass%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/gpu-lightmass%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/</guid><description>&lt;img src="https://zentia.github.io/p/gpu-lightmass%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7/ue5-hero.png" alt="Featured image of post GPU Lightmass全局光照" />&lt;p>GPU Lightmass（GPULM）是一种光照烘培解决方案，它可以预计算移动性设置为静止（Stationary）或静态（Static）的光源的复杂光线交互，并将这些数据保存在生成的光照贴图纹理中，这些纹理又转而应用到场景几何体。这个将光照烘培到纹理中的系统类似于基于CPU的Lightmass全局光照系统。&lt;/p></description></item><item><title>Unreal Swarm</title><link>https://zentia.github.io/p/unreal-swarm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/unreal-swarm/</guid><description>&lt;img src="https://zentia.github.io/p/unreal-swarm/ue5-hero.png" alt="Featured image of post Unreal Swarm" />&lt;p>Unreal Swarm是一种通用的应用程序和任务分配系统，由两种应用程序类型组成，一种是分配构建任务的协调程序，另一种是利用主机系统资产完成分配任务的代理程序。&lt;/p></description></item><item><title>间接光照缓存</title><link>https://zentia.github.io/p/%E9%97%B4%E6%8E%A5%E5%85%89%E7%85%A7%E7%BC%93%E5%AD%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/%E9%97%B4%E6%8E%A5%E5%85%89%E7%85%A7%E7%BC%93%E5%AD%98/</guid><description>&lt;img src="https://zentia.github.io/p/%E9%97%B4%E6%8E%A5%E5%85%89%E7%85%A7%E7%BC%93%E5%AD%98/ue5-hero.png" alt="Featured image of post 间接光照缓存" />&lt;p>CPU Lightmass可以在静态对象上生成间接光照的光照贴图，但角色之类的动态对象同样需要一种接受间接光照的方法。这能通过间接光照缓存（Indirect Lighting Cache）来解决，其在光照构建时使用Lightmass生成的采样来计算动态对象在运行时的间接光照。&lt;/p>
&lt;p>下图显示了带与不带间接光照缓存渲染的效果差异：&lt;/p>
&lt;p>&lt;img src="https://zentia.github.io/p/%E9%97%B4%E6%8E%A5%E5%85%89%E7%85%A7%E7%BC%93%E5%AD%98/01-indirect-cache-diffuse-no-indirect.png"
width="1918"
height="1130"
srcset="https://zentia.github.io/p/%E9%97%B4%E6%8E%A5%E5%85%89%E7%85%A7%E7%BC%93%E5%AD%98/01-indirect-cache-diffuse-no-indirect_hu_4096c6f569dd0e1e.png 480w, https://zentia.github.io/p/%E9%97%B4%E6%8E%A5%E5%85%89%E7%85%A7%E7%BC%93%E5%AD%98/01-indirect-cache-diffuse-no-indirect_hu_f8d09119c334506.png 1024w"
loading="lazy"
alt="Elemental关卡中的漫反射光照，不带间接光照缓存"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="407px"
>&lt;/p></description></item><item><title>Lightmass基础知识</title><link>https://zentia.github.io/p/lightmass%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/lightmass%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>&lt;img src="https://zentia.github.io/p/lightmass%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/ue5-hero.png" alt="Featured image of post Lightmass基础知识" />&lt;p>全局光照（Lightmass）创建具有复杂光交互作用的光照图，例如区域阴影和漫反射。&lt;/p></description></item><item><title>Lightmass门户</title><link>https://zentia.github.io/p/lightmass%E9%97%A8%E6%88%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/lightmass%E9%97%A8%E6%88%B7/</guid><description>&lt;img src="https://zentia.github.io/p/lightmass%E9%97%A8%E6%88%B7/ue5-hero.png" alt="Featured image of post Lightmass门户" />&lt;p>在收集光线时，Lightmass可以使用来自光子映射技术的光子追溯到聚光源、点光源和定向光源。这意味着它可以找到这些类型的光源来自哪个小窗户，并以高品质解析射入的光线。但是，天空光照自发光网格体不能有效地支持光子发射，所以Lightmass只能强行查找微小地重要光照特性。&lt;/p></description></item><item><title>Lumen全局光照和反射</title><link>https://zentia.github.io/p/lumen%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7%E5%92%8C%E5%8F%8D%E5%B0%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zentia.github.io/p/lumen%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7%E5%92%8C%E5%8F%8D%E5%B0%84/</guid><description>&lt;img src="https://zentia.github.io/p/lumen%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7%E5%92%8C%E5%8F%8D%E5%B0%84/ue5-hero.png" alt="Featured image of post Lumen全局光照和反射" />&lt;p>Lumen是虚幻引擎5的全动态全局光照和反射系统，专门针对下一代主机进行设计，是默认的全局光照和反射系统。Lumen能够在拥有大量细节的宏大场景中渲染间接漫反射，并确保无限次数的反弹以及间接高光度反射效果；无论是毫米级别的场景细节，还是数以千米的宏大场景，它都能应对得游刃有余。&lt;/p>
&lt;p>&lt;img src="https://zentia.github.io/p/lumen%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7%E5%92%8C%E5%8F%8D%E5%B0%84/lumen-scionti-04.png"
width="1920"
height="1080"
srcset="https://zentia.github.io/p/lumen%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7%E5%92%8C%E5%8F%8D%E5%B0%84/lumen-scionti-04_hu_838cdccfad3513a1.png 480w, https://zentia.github.io/p/lumen%E5%85%A8%E5%B1%80%E5%85%89%E7%85%A7%E5%92%8C%E5%8F%8D%E5%B0%84/lumen-scionti-04_hu_ca894aaced6f2e95.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;h1 id="lumen入门">Lumen入门
&lt;/h1>&lt;p>新创建的项目默认启用Lumen全局光照和反射，及其依赖功能，例如生成网格体距离场。项目从虚幻引擎4升级到虚幻引擎5时， 不会 自动启用Lumen功能。这能防止破坏或更改这些项目中的光照路线。&lt;/p></description></item></channel></rss>
start
:Launch[Platform].cpp;
note right
不同Platform的入口函数，最终走向同一个启动函数，GuardedMain
end note
:GuardedMain;
note right
各个平台的main，流程大同小异，注意iOS，Android会在这里创建UE游戏线程，UE主线程不是APP主线程
end note
#00FF00:EnginePreInit;
note right
引擎初始化的四大阶段：EnginePreInit，EngineInit，EngineTick，EngineExit
end note
split
    if(GIsEditor) then (Y)
        #8EE5EE:EditorInit(GEngineLoop);
        split
            :EngineTick();
            split
                :EditorExit();
                :GLevelEditorModeTools().SetDefaultMode(FBuiltInEditorModes::EM_Default)
                GLevelEditorModeTools().DeactiveAllModes();
                :GEditor->SaveConfig()
                GLevelEditorModeTools().SaveConfig();
                note right
                保存config
                end note
                :FActorFolders::CleanUp();
                note right
                清空actorfolders
                end note
                :FEditorDirectories::Get().SaveLastDirectories();
                note right
                保存项目默认路径
                end note
                :FTaskGraphInterface::Get().ProcessThreadUntilIdle(ENamedThreads::GameThread);
                note right
                等待主线程的task graph结束
                end note
                :FUnrealEdMisc::Get().OnExit();
                note right 
                清空平台层editor
                end note
                :delete GDebugToolExec
                GDebugToolExec=NULL;
                note right
                删除debug tool
                end note
            split again
                :FThreadHeartBeat::Get().HeartBeat(true)
                FGameThreadHitchHeartBeat::Get().FrameStart()
                FPlatformMisc::TickHotfixables();
                note right
                发送心跳到disgonstics线程  
                end note
                if(!GUseThreadedRendering && !GIsRenderingThreadSuspended.Load(EmemoryOrder::Relaxed)) then (Y)
                    :TickRenderingTickables();
                    note right
                    在-onethread模式中，确保ticking the rendering tickables避免泄露bug
                    end note
                endif
                :ensure(GetMoviePlayer()->IsLoadingFinished() && !GetMoviePlayer()->IsMovieCurrentlyPlaying());
                note right
                确保在loading或播放loading视频时没有开始当前帧循环
                end note
                if(UE_EXTERNAL_PROFILING_ENABLED) then (Y)
                    :ActiveProfiler->FrameSync();
                    note right
                    外部Profiler的FrameSync
                    end note
                    :FPlatformMisc::BeginNamedEventFrame();
                    note right
                    帧头
                    end note
                    :uint64 CurrentFrameCounter=GetFrameCounter;
                    note right
                    帧数
                    end note
                    :IConsoleManager::Get().CallAllConsoleVariableSinks();
                    note right
                    调用CVar修改的回调
                    end note
                    : FCoreDeleagte::OnBeginFrame.Broadcast() ;
                    note right
                    帧头的回调
                    end note
                    : GLog->FlushThreadedLogs() ;
                    note right
                    Flush来自其他线程的log
                    end note
                endif
            end split
        split again
            :EngineLoop.Init();
            :FUnrealEdMisc::Get().OnInit();
            :FEditorDirectories::Get().LoadLastDirectories();
            :FActorFolders::Init();
            :FDestopPlatformModule::Get()->GetTargetsForCurrentProject();
            note right
            CORE EDITOR INIT FINISHED
            end note
            :FPlatformSplash::Hide();
            note right
            隐藏splash screen
            end note
        end split
    else (N)
        :EngineInit();
    endif
split again
    :GEngineLoop.PreInit(CmdLine);
    note right
    解析cmd-line，初始化是否时编辑器
    end note
    :PreInitPreStartUpScreen(CmdLine);
    split
        :PreInitPostStartupScreen(CmdLine);
        split
            :PreInitContext.CleanUp();
        split again
            :xxx=PreInitContext.xxx;
            note right
            一些PreInit产生的变量存储从FPreInitContext取出
            end note
        end split
    split again
        :FDelayAutoRegisterHelper::RunAndClearDelayedAutoDelegates(EDelayedRegisterRunPhase::StartOfEnginePreInit);
        note right
        延迟执行一次性Delagate，分别有如下阶段：
        StartOfEnginePreInit
        FileSystemReady
        StatSystemReady
        IniSystemReady
        TaskGraphSystemReady,
        ShaderTypesReady,
        PreObjectSystemReady,
        ObjectSystemReady,
        EndOfEngineInit
        end note
        :FMemory::SetupTLSCachesOnCurrentThread();
        :FPlatformProcess::SetCurrentWorkingDirectoryToBaseDir();
        note right
        切换到可执行目录
        end note
        :FCoreUObjectDelegates::PostGarbageCollectConditionalBeginDestroy.AddStatic(DeferredPhysResourceCleanup);
        note right
        延迟清楚PhysX产生的Mesh与Material的回调
        end note
        :FCoreDeleagtes::OnSamplingInput.AddStatic(UpdateGInputTime);
        note right
        利用平台的时钟获取当前输入事件时间
        end note
        :BeginPreInitTextLocalization();
        split
            :FModuleManager::Get().AddExtraBinarySearchPaths();
            :FPlatformFileManager::InitializeNewAsyncIO();
            note right
            为所有IPlatformFile调用InitializeNewAsyncIO方法，确保它们都知道async IO和EDL
            end note
            :FDelayAutoRegisterHelper::RunAndClearDelayedAutoDelegates(EDelayedRegisterRunPhase::FileSystemReady);
            :FPlatformProcess::SetThreadAffinityMask(FPlatformAffinity::GetMainGameMask());
            note right
            设置主线程亲和性
            end note
            :FPlatformProcess::SetupGameThread();
            note right
            平台层可以在这里做任何与主线程相关的事情
            end note
            :AddShaderSourceDirectoryMapping(TEXT("/Engine"), FGenericPlaformProcess::ShaderDir());
            note right
            添加引擎默认Shader的平台层路径到虚拟路径的映射
            end note
            :LaunchUpdateMostRecentProjectFile();
            note right
            如果命令行没有指定项目，则启动最近打开的项目
            end note
            :FApp::SetUseFixedTimeStep(bDeterministic || FParse::Param(FCommandLine::Get(), TEXT("UseFixedTimeStep")));
            note right
            如果命令行有指定UseFixedTimeStep，则每帧Tick使用一个假的固定DeltaTime，用于Movie播放时稳定输出
            end note
            : FMath::RandInit(Seed1)
              FMath::SRandInit(Seed2) ;
            note right
            如果命令行有指定FixedSeed，则数学库的Rand和SRand的种子恒定为0，否则使用平台的时钟
            end note
            :FTaskGraphInterface::Startup(FPlatformMisc::NumberOfCores());
            note right
            启动TaskGraphSystem
            end note
            :FTaskGraphInterface::Get().AttachToThread(ENamedThreads::GameThread);
            note right
            给TaskGraphSystem一个线程，通常用于设置LTS值
            end note
            :FDelayAutoRegisterHelper::RunAndClearDelayedAutoDelegates(EDelayedRegisterRunPhase::StatSystemReady);
            :LoadCoreModules();
            note right
            优先加载CoreModule，用于被其他模块以来，需要在InitializeRenderingCVarsCaching之前加载
            end note 
            split
                :InitializeRenderingCVarsCaching();
                if(FPlatformProcess::SupportsMultithreading() && bCreateTaskGraphAndThreadPools) then (Y)
                    :GThreadPool = FQueuedThreadPool::Allocate();
                    :GThreadPool->Create(NumThreadsInThreadPool, StackSize * 1024, TPri_SlightlyBelowNormal);
                    note right
                    创建GThreadPool，线程优先级如下
                    TPri_Normal,
                    TPri_AboveNormal,
                    TPri_BelowNormal,
                    TPri_Highest,
                    TPri_Lowest,
                    TPri_SlightlyBelowNormal,
                    TPri_TimeCritical
                    end note
                    :GBackgroundPriorityThreadPool = FQueuedThreadPool::Allocate;
                    :GBackgroundPriorityThreadPool->Create(NumThreadsInThreadPool, StackSize * 1024, TPri_Lowest);
                    :GLargeThreadPool = FQueuedThreadPool::Allocate;
                    :GLargeThreadPool->Create(NumThreadsInLargeThreadPool, StackSize * 1024);
                endif
                :LoadPreInitModules;
                split
                    if (WITH_ENGINE && CSV_PROFILER) then (Y)
                        if (!IsRunningDedicatedServer()) then (Y)
                            :FCoreDeleagtes::OnBeginFrame.AddStatic(UpdateCoreCsvStats_BeginFrame);
                            :FCoreDeleagtes::OnEndFrame.AddStatic(UpdateCoreCsvStats_EndFrame);
                            :FCsvProfiler::Get()->Init();
                        endif
                    endif
                    :AppLifetimeEventCapture::Init();
                    split
                        :AppInit();
                        split
                            if (FPlatformProcess::SupportsMultithreading()) then (Y)
                                :GIOThreadPool = FQueuedThreadPool::Allocate();
                                :GIOThreadPool->Create(NumThreadsInThreadPool, 96 * 1024, TPri_AboveNormal);
                            endif
                            :GSystemSettings.Initialize(bHasEditorToken);
                            :ApplyCVarSettingsFromIni(TEXT("/Script/Engine.RendererSettings"), *GEngineIni, ECVF_SetByProjectSetting);
                            :ApplyCVarSettingsFromIni(TEXT("/Script/Engine.RendererOverrideSettings"), *GEngineIni, ECVF_SetByProjectSetting);
                            :ApplyCVarSettingsFromIni(TEXT("/Script/Engine.StreamingSettings"), *GEngineIni, ECVF_SetByProjectSetting);
                            :ApplyCVarSettingsFromIni(TEXT("/Script/Engine.GarbageCollectionSettings"), *GEngineIni, ECVF_SetByProjectSetting);
                            :ApplyCVarSettingsFromIni(TEXT("/Script/Engine.NetworkSettings"), *GEngineIni, ECVF_SetByProjectSetting);
                            :ApplyCVarSettingsFromIni(TEXT("/Script/UnrealEd.CookerSettings"), *GEngineIni, ECVF_SetByProjectSetting);
                            note right
                            CVar settings优先级从弱到强如下：
                            ECVF_SetByConstructor,
                            ECVF_SetByScalability,
                            ECVF_SetByGameSetting,
                            ECVF_SetByProjectSetting,
                            ECVF_SetByDeviceProfile,
                            ECVF_SetConsoleVarablesIni,
                            ECVF_SetByCommandline,
                            ECVF_SetByCode,
                            ECVF_SetByConsole,
                            end note
                            :UGameUserSettings::PreloadResolutionSettings();
                            note right
                            在视频播放前将分辨率设置加载好
                            end note
                            :Scalability::InitScalabilitySystem();
                            :UDeviceProfileManager::InitializeCVarsForActiveDeviceProfile();
                            note right
                            初始化DeviceProfile的CVar设置
                            end note
                            :Scalability::LoadState(bHasEditorToken && !GEditorSettingsIni.IsEmpty()) ? GEditorSettingsIni : GGameUserSettingsIni);
                            note right
                            为了避免大量重复的re-init，在SystemSettings.ini加载后，并且在ConsoleVariables.ini加载前，以及在InitializeCVarsForActiveDeviceProfile()之后就是一个合适的实际初始化Scalability的设置
                            end note
                            if (FPlatformMisc::UseRenderThread()) then (Y)
                                :GUseThreadedRendering = true;
                            endif
                            :FConfigCacheIni::LoadConsoleVariablesFromINI();
                            :FPlatformMisc::PlatformInit();
                            :FPlatformApplicationMisc::Init();
                            note right
                            在SystemSettings加载后执行平台Application Init
                            end note
                            :FPlatformMemory::Init();
                            :GLogConsole->SetIniFilename(*GGameIni);
                            note right
                            设置LogConsole在退出时保存设置的ini
                            end note
                            :IPlatformFeatursModule::Get();
                            note right
                            启动平台相关的features模块
                            end note
                            :InitGamePhys();
                            note right
                            加载物理引擎，后面在post-load进行cook时需要用到
                            end note
                            if (bShouldCleanShaderWorkingDirectory && !FParse::Param(FCommandLine::Get(), TEXT("Multiprocess"))) then (Y)
                                :IFileManager::Get().DeleteDirectory(*UserShaderDir, false, true);
                                note right
                                如果时第一个实例，并且不是多进程，就可以把工作目录下的（非源目录）shader目录删掉 
                                end note
                            endif
                            :InitEngineTextLocalization();
                            note right
                            初始化引擎文本本地化
                            end note
                            :FSlateApplication::InitHighDPI(bForceEnableHighDPI);
                            note right
                            初始化是否需要高DPI，该函数需要在窗口出现前调用
                            end note
                            :UStringTable::InitializeEngineBridge();
                            note right
                            初始化FStringTableEngineBridge，这个时用来存储UStringTable的容器，负责管理正在AsyncLoad和LoadComplete的所有UStringTable
                            end note
                            if (FApp::ShouldUseThreadingForPerformance() && FPlatformMisc::AllowAudioThread()) then (Y)
                                :FAudioThread::SetUseThreadedAudio(bUseThreadedAudio);
                                note right
                                如果因为性能原因需要将音频放到音频线程，则需要先设置需要使用音频线程的标记位
                                end note
                            endif
                            :FPlatformSplash::Show();
                            note right
                            展示启动画面
                            end note
                            if (!IsRunningDedicatedServer() && (bHasEditorToken || bIsRegularClient())) then (Y)
                                :FSlateApplication::Create();
                            else (N)
                                :EKeys::Initialize();
                                :FCoreStyle::ResetToDefault();
                                note right
                                如果没有创建SlateApplication，则还是需要做比较的一部分初始化
                                end note
                            endif
                            :FPackageLocalizationManager::Get().InitializeFromLazyCallback([](FPackageLocalizationManager & InPackageLocalizationManager){
                                InPackageLocalizationManager.InitializeFromCache(MakeShareable(new FEnginePackageLocalizationCache()))
                            });
                            note right
                            Package本地化缓存
                            end note
                            :FShaderParametersMetadata::InitializeAllUniformBufferStructs();
                            note right
                            初始化UniformBuffer结构Layout的meta
                            end note
                            :RHIInit(bHasEditorToken);
                        end split
                    end split
                split again
                    :FModuleManager::Get().LoadModule(TEXT("Engine"));
                    :FModuleManager::Get().LoadModule(TEXT("Renderer"));
                end split
            split again
                :FModuleManager::Get().LoadModule(TEXT("CoreUObject"));
                :LoadModuleWithFailureReason(InModuleName, FailureReason);
            end split
        split again
            :FCoreDeleagtes::OnPakFileMounted.AddRaw(&FTextLocalizationManager::Get(), &FTextLocalizationManager::OnPakFileMounted);
            note right
            在PAK file加载前注册该delegate
            end note
        end split
    end split
end split